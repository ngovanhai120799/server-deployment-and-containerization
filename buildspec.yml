---
version: 0.2


phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo 'about to call dockerd'
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.10/2019-08-14/bin/darwin/amd64/aws-iam-authenticator
      # Download the latest stable release kubectl
      # - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      # You must use a kubectl version that is within one minor version difference of your Amazon EKS cluster control plane.
      # For example, a 1.21 kubectl client works with Kubernetes 1.20, 1.21 and 1.22 clusters.
      # Ref: https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html OR https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/
      # To download a specific version v1.27.9 on Linux, use:
      - curl -LO https://dl.k8s.io/v1.30.6/bin/linux/amd64/kubectl
      # Download the kubectl checksum file
      - curl -LO https://dl.k8s.io/v1.30.6/bin/linux/amd64/kubectl.sha256
      # Validate the kubectl binary against the checksum file
      - echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
      # Install kubectl
      - echo 'Install kubectl'
      - chmod +x ./kubectl ./aws-iam-authenticator
      # - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
      - export PATH=$PWD/:$PATH
      - python --version
      - echo 'export PATH=$PWD/:$PATH' >> $HOME/.bashrc
      - echo `kubectl version --client=true`
      - python -m pip install --upgrade --force pip
      - wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add
      - apt-get update && apt-get -y install jq  && pip install --upgrade awscli pytest
  pre_build:
    commands:
      # Docker Image Tag with Date Time & Code Buiild Resolved Source Version
      - TAG="$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      # Update Image tag in our Kubernetes Deployment Manifest
      - echo "Update Image tag in kube-manifest..."
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' kube-manifests/deployment.yml
      - echo "Verify AWS CLI Version..."
      - aws --version
      # Login to ECR Registry for docker to push the image to ECR Repository
      - echo "Login in to Amazon ECR..."
      - $(aws ecr get-login --no-include-email)
      # Update Kube config Home Directory
      - export KUBECONFIG=$HOME/.kube/config
  build:
    commands:
      - echo "Build started on `date`"
      - echo "Building the Docker image..."
      - docker build --tag $REPOSITORY_URI:$TAG .

  post_build:
    commands:
      - echo "Build completed on `date`"
      - echo "Pushing the Docker image to ECR Repository"
      - docker push $REPOSITORY_URI:$TAG
      - echo "Docker Image Push to ECR Completed -  $REPOSITORY_URI:$TAG"
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - # Setup kubectl with our EKS Cluster
      # Extracting AWS Credential Information using STS Assume Role for kubectl
      - echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"
      - echo $EKS_CLUSTER_NAME
      - echo $EKS_KUBECTL_ROLE_ARN
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $EKS_KUBECTL_ROLE_ARN
      - echo "Apply changes to kube manifests"
      - kubectl apply -f kube-manifests/
      - printf '[{"name":"simple_jwt_api","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json

artifacts:
  files:
    - build.json
    - kube-manifests/*
env:
  parameter-store:
    JWT_SECRET: JWT_SECRET